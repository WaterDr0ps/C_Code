#pragma warning(disable:6031)
#define  _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<malloc.h>

//comlpex 复数四则运算
/*
struct complex {
	double realpart;
	double imagpart;
};
void InitComplex(complex &C, double x, double y) {//初始化构造复数
	C.realpart = x;
	C.imagpart = y;
}
double GetReal(complex C) {
	return C.realpart;
}
double GetImag(complex C) {
	return C.imagpart;
}
complex add(complex C1, complex C2) {//复数加法
	complex Sum;
	Sum.realpart = C1.realpart + C2.realpart;
	Sum.imagpart = C1.imagpart + C2.imagpart;
	return Sum;
}
complex sub(complex C1, complex C2) {//复数减法
	complex Sum;
	Sum.realpart = C1.realpart - C2.realpart;
	Sum.imagpart = C1.imagpart - C2.imagpart;
	return Sum;
}
complex mul(complex C1, complex C2) {//复数乘法
	complex Sum;
	Sum.realpart = (C1.realpart * C2.realpart - C1.imagpart * C2.imagpart);
	Sum.imagpart = (C1.imagpart * C2.realpart + C1.realpart * C2.imagpart);
	return Sum;
}
complex div(complex C1, complex C2) {//复数除法
	complex Sum;
	Sum.realpart = (C1.realpart * C2.realpart + C1.imagpart * C2.imagpart) / (C2.realpart * C2.realpart + C2.imagpart * C2.imagpart);
	Sum.imagpart = (C1.imagpart * C2.realpart - C1.realpart * C2.imagpart) / (C2.realpart * C2.realpart + C2.imagpart * C2.imagpart);
	return Sum;
}
int main() {
	complex C1, C2, C_add,C_sub,C_mul,C_div;double X1, X2, Y1, Y2;//X1，Y1是C1的实部虚部，X2,Y2是C2的实部虚部
	printf("请输入C1的实部和虚部：");
	scanf("%lf%lf", &X1, &Y1);//接收C1数据
	printf("请输入C2的实部和虚部：");
	scanf("%lf%lf", &X2, &Y2);//接收C2数据
	InitComplex(C1, X1, Y1);//初始化赋值，将实部X1虚部Y1赋值给complex类的C1
	InitComplex(C2, X2, Y2);//初始化赋值，将实部X2虚部Y2赋值给complex类的C2
	C_add = add(C1, C2);
	C_sub = sub(C1, C2);
	C_mul = mul(C1, C2);
	C_div = div(C1, C2);
	printf("两个复数的和是:%lf+%lfi\n",GetReal(C_add),GetImag(C_add));//调用实部和虚部并输出
	printf("两个复数的差是:%lf+%lfi\n", GetReal(C_sub), GetImag(C_sub));
	printf("两个复数的积是:%lf+%lfi\n", GetReal(C_mul), GetImag(C_mul));
	printf("两个复数的商是:%lf+%lfi\n", GetReal(C_div), GetImag(C_div));
} 
*/

//冒泡排序
/*
int main() {
	int arr[10];
	printf("请输入五个数:");
	for (int i = 1;i <= 5;i++) {
		scanf("%d", &arr[i]);
	}
	for (int i = 1;i <= 5;i++) {
		for (int j = 1;j <= 5-i;j++) {
			if (arr[j] < arr[j+1]) {
				int temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
	}
	for (int i = 1;i <= 5;i++) {
		printf("%d ", arr[i]);
	}
}
*/

//选择排序
/*
int main() {
	int arr[10];
	printf("请输入五个数：");
	for (int i = 1;i <= 5;i++) {
		scanf("%d", &arr[i]);
	}
	for (int i = 1;i <= 5;i++) {
		int min = i;//min是最小数位置的标志
		for (int j = i + 1;j <= 5;j++) {
			if (arr[j] < arr[min]) {
				min = j;//如果j位置的数比i位置的数小，重新赋予min标志
			}
		}
		if (min != i) {//如果发生交换，则将min标志的最小值与i进行更换
			int temp = arr[i];
			arr[i] = arr[min];
			arr[min] = temp;
		}
	}
	printf("排序后的数是：");
	for (int i = 1;i <= 5;i++) {
		printf("%d", arr[i]);
	}
}
*/

//线性表增删查改
/*
typedef struct  {
	int* elem;//存储空间基址
	int length;//当前长度
	int listsize;//当前分配的存储容量
}SqList;
void InitList(SqList& L) {
	L.elem = (int*)malloc(50*sizeof(int));//初始化开辟50个int空间
	L.length = 0;
	L.listsize = 50;
}
void CreateList(SqList& L) {
	for (int i = 0;i < 6;i++) {
		scanf("%d", &L.elem[i]);
		L.length++;
	}
}
void PrintList(SqList& L) {
	for (int i = 0;i < L.length;i++) {
		printf("%d ", L.elem[i]);
	}
	printf("\n当前有:%d个元素\n", L.length);
}
void InsertList(SqList& L) {
	int n, input;
	printf("在第几位数插入什么数？\n");
	scanf("%d%d", &n, &input);
	for (int i = L.length;i >= n;i--) {
		L.elem[i] = L.elem[i - 1];
	}
	L.elem[n - 1] = input;
	L.length++;
}
void DeleteList(SqList& L) {
	int n,i;
	printf("删除第几位数？\n");
	scanf("%d", &n);
	for (i = n - 1;i < L.length-1;i++) {
		L.elem[i] = L.elem[i + 1];
	}
	L.length--;
}
void LocationList(SqList& L,int number) {
	int i;
	for (i = 0;i < L.length;i++) {
		if (L.elem[i] == number) { 	
			printf("在第%d位", i + 1); 
			break;
		}
	}
	if (i == L.length) printf("0");
}
void ModifyList(SqList& L, int n, int number) {
	L.elem[n - 1] = number;
}
int main() {
	SqList L;
	InitList(L);
	CreateList(L);
	ModifyList(L, 4,10); 
	PrintList(L);
}
*/